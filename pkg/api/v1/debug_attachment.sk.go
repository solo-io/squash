// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewDebugAttachment(namespace, name string) *DebugAttachment {
	debugattachment := &DebugAttachment{}
	debugattachment.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return debugattachment
}

func (r *DebugAttachment) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *DebugAttachment) SetStatus(status core.Status) {
	r.Status = status
}

func (r *DebugAttachment) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.PlankName,
		r.Debugger,
		r.Image,
		r.ProcessName,
		r.Node,
		r.MatchRequest,
		r.DebugServerAddress,
		r.Pod,
		r.Container,
		r.DebugNamespace,
		r.State,
	)
}

type DebugAttachmentList []*DebugAttachment
type DebugattachmentsByNamespace map[string]DebugAttachmentList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list DebugAttachmentList) Find(namespace, name string) (*DebugAttachment, error) {
	for _, debugAttachment := range list {
		if debugAttachment.GetMetadata().Name == name {
			if namespace == "" || debugAttachment.GetMetadata().Namespace == namespace {
				return debugAttachment, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find debugAttachment %v.%v", namespace, name)
}

func (list DebugAttachmentList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, debugAttachment := range list {
		ress = append(ress, debugAttachment)
	}
	return ress
}

func (list DebugAttachmentList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, debugAttachment := range list {
		ress = append(ress, debugAttachment)
	}
	return ress
}

func (list DebugAttachmentList) Names() []string {
	var names []string
	for _, debugAttachment := range list {
		names = append(names, debugAttachment.GetMetadata().Name)
	}
	return names
}

func (list DebugAttachmentList) NamespacesDotNames() []string {
	var names []string
	for _, debugAttachment := range list {
		names = append(names, debugAttachment.GetMetadata().Namespace+"."+debugAttachment.GetMetadata().Name)
	}
	return names
}

func (list DebugAttachmentList) Sort() DebugAttachmentList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list DebugAttachmentList) Clone() DebugAttachmentList {
	var debugAttachmentList DebugAttachmentList
	for _, debugAttachment := range list {
		debugAttachmentList = append(debugAttachmentList, resources.Clone(debugAttachment).(*DebugAttachment))
	}
	return debugAttachmentList
}

func (list DebugAttachmentList) Each(f func(element *DebugAttachment)) {
	for _, debugAttachment := range list {
		f(debugAttachment)
	}
}

func (list DebugAttachmentList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *DebugAttachment) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

func (byNamespace DebugattachmentsByNamespace) Add(debugAttachment ...*DebugAttachment) {
	for _, item := range debugAttachment {
		byNamespace[item.GetMetadata().Namespace] = append(byNamespace[item.GetMetadata().Namespace], item)
	}
}

func (byNamespace DebugattachmentsByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace DebugattachmentsByNamespace) List() DebugAttachmentList {
	var list DebugAttachmentList
	for _, debugAttachmentList := range byNamespace {
		list = append(list, debugAttachmentList...)
	}
	return list.Sort()
}

func (byNamespace DebugattachmentsByNamespace) Clone() DebugattachmentsByNamespace {
	cloned := make(DebugattachmentsByNamespace)
	for ns, list := range byNamespace {
		cloned[ns] = list.Clone()
	}
	return cloned
}

var _ resources.Resource = &DebugAttachment{}

// Kubernetes Adapter for DebugAttachment

func (o *DebugAttachment) GetObjectKind() schema.ObjectKind {
	t := DebugAttachmentCrd.TypeMeta()
	return &t
}

func (o *DebugAttachment) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*DebugAttachment)
}

var DebugAttachmentCrd = crd.NewCrd("squash.solo.io",
	"debugattachments",
	"squash.solo.io",
	"v1",
	"DebugAttachment",
	"debatt",
	false,
	&DebugAttachment{})
