apiVersion: v1
kind: Namespace
metadata:
  name: squash
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: squash-server
  namespace: squash
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: squash-pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: squash-read-pod-info
subjects:
- kind: ServiceAccount
  namespace: squash
  name: squash-server
#  apiGroup: rbac.authorization.k8s.io # some reason this fails on kube 1.7.4
roleRef:
  kind: ClusterRole
  name: squash-pod-reader
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: squash-crds
rules:
- apiGroups: ["squash.solo.io"] # full control to squash crds
  resources: ["*"]
  verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: squash-full-control-crds
subjects:
- kind: ServiceAccount
  namespace: squash
  name: squash-server
- kind: ServiceAccount
  namespace: squash
  name: default
roleRef:
  kind: ClusterRole
  name: squash-crds
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: squash-server
  namespace: squash
  labels:
    app: squash-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: squash-server
  template:
    metadata:
      labels:
        app: squash-server
    spec:
      serviceAccountName: squash-server
      containers:
      - name: squash-server
        image: soloio/squash-server:v0.3.1
        ports:
        - containerPort: 8080
          protocol: TCP
          name: http-squash-api
---
kind: Service
apiVersion: v1
metadata:
  name: squash-server
  namespace: squash
spec:
  selector:
    app: squash-server
  ports:
    - name: http-squash-api
      protocol: TCP
      port: 80
      targetPort: 8080