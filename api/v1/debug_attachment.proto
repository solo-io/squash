syntax = "proto3";
package squash.solo.io;
option go_package = "github.com/solo-io/squash/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";

/*
Attachments store the information needed for squash to coordinate a debugging session
 */
message DebugAttachment {
  // From solo-kit common

  option (core.solo.io.resource).short_name = "debatt";
  option (core.solo.io.resource).plural_name = "debugattachments";

  core.solo.io.Metadata metadata = 1 [(gogoproto.nullable) = false];

  core.solo.io.Status status = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

  // From github.com/solo-io/squash/pkg/models.DebugAttachmentSpec

  string plank_name = 3;

  string debugger = 4;

  string image = 5;

  string process_name = 6;

  string node = 7;

  bool match_request = 8;

  // From github.com/solo-io/squash/pkg/models.DebugAttachmentStatus

  string debug_server_address = 9;

  enum State {

    // Newly created DebugAttachments have state RequestingAttachment
    RequestingAttachment = 0;

    // When the event loop begins fullfilling an attachment request it sets
    // DebugAttachments state to PendingAttachment
    PendingAttachment = 1;

    // When squash client successfully attaches, it sets state to Attached
    Attached = 2;

    // Indicates that user has requested an attachment be removed
    RequestingDelete = 3;

    // When the event loop begins fullfilling a delete request it sets this
    // status and triggers a cleanup routine
    // When the cleanup routine completes, it deletes the CRD
    PendingDelete = 4;
  }


  // From cli debug-container (possibly redundant)

  string pod = 11;

  string container = 12;

  string debug_namespace = 13;

  //// ALL PRIOR FIELDS ARE DEPRECATED

  State state = 20;

  /* Future API:
  Intent intent = 21;

  Plank plank = 22;

  PortSpec port_spec = 23;
  */
}

// Describes the user's debug intentions
message Intent {
  // type of debugger to use
  string debugger = 1;
  
  // pod to debug
  core.solo.io.ResourceRef pod = 2;

  // name of container to debug
  string container_name = 3;

  // NOT YET IMPLEMENTED
  // if a container has multiple processes and you do not want to debug the first process, this string is used to select a specific process
  string process_matcher = 4;
}

// Describes the pod squash spawns for managing a particular debug session
message Plank {
  // plank pod reference
  core.solo.io.ResourceRef pod = 1;

  // indicates when plank has completed the debugger-specify preparation
  bool ready_for_connect = 2;
}

// Contains port information needed to connect or find a debugger
message PortSpec {
  oneof port_location {
    // the relevant debug port on the plank pod
    string plank = 1;
  
    // the relevant debug port on the target pod
    string target = 2;
  }
}